// This file contains dummy definitions of builtins
// that are used for typechecking

def get_field_size() -> u32 {
    return 0u32;
}

//def get_field_modulus() -> integer {
//    return 0;
//}

const u32 FIELD_SIZE_IN_BITS = get_field_size();
//const integer FIELD_MODULUS = get_field_modulus();

// XXX(unimpl)
// sha256round

// XXX(unimpl)
// snark_verify_bls12_377 as verify

// Dummy function
def main() -> bool {
    return false;
}

def u64_from_bits(bool[64] a) -> u64 {
    return 0u64;
}

def u32_from_bits(bool[32] a) -> u32 {
    return 0u32;
}

def u16_from_bits(bool[16] a) -> u16 {
    return 0u16;
}

def u8_from_bits(bool[8] a) -> u8 {
    return 0u8;
}

def u64_to_bits(u64 a) -> bool[64] {
    return [false; 64];
}

def u32_to_bits(u32 a) -> bool[32] {
    return [false; 32];
}

def u16_to_bits(u16 a) -> bool[16] {
    return [false; 16];
}

def u8_to_bits(u8 a) -> bool[8] {
    return [false; 8];
}

def unpack<N>(field i) -> bool[N] {
    return [false; N];
}

def bit_array_le<N>(bool[N] a, bool[N] b) -> bool {
    return false;
}

def u8_to_field(u8 i) -> field {
    return 0f;
}

def u16_to_field(u16 i) -> field {
    return 0f;
}

def u32_to_field(u32 i) -> field {
    return 0f;
}

def u64_to_field(u64 i) -> field {
    return 0f;
}

def u8_to_u64(u8 i) -> u64 {
    return 0u64;
}

def u16_to_u64(u16 i) -> u64 {
    return 0u64;
}

def u32_to_u64(u32 i) -> u64 {
    return 0u64;
}

def u8_to_u32(u8 i) -> u32 {
    return 0u32;
}

def u16_to_u32(u16 i) -> u32 {
    return 0u32;
}

def u8_to_u16(u8 i) -> u16 {
    return 0u16;
}

def field_to_bool_unsafe(field i) -> bool {
    return true;
}

//def int_to_bits<N>(integer i) -> bool[N] {
//    return [false; N];
//}

//def int_size(integer i) -> u32 {
//    return 0u32;
//}

// The output is sampled uniformly and independently of the inputs
def sample_challenge<N>(field[N] x) -> field {
    return 0;
}

// Return a key in x that matches y
def reverse_lookup<N>(field[N] x, field y) -> field {
    return 0;
}

// Check that x contains a value equal to y; the result is only assertable.
def value_in_array<N>(field y, field[N] x) -> bool {
    return true;
}

// Find inverse of a mod b
//def int_modinv(integer a, integer b) -> integer {
//    return 0;
//}

//def integer_to_field(integer a) -> field {
//    return 0;
//}

//def field_to_integer(field a) -> integer {
//    return 0;
//}
