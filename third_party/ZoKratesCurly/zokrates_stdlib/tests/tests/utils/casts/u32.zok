from "utils/casts.zok" import cast;

// u32    -> bool[32]
// u32[N] -> bool[P]
// u32    -> field
// u32[N] -> field[N]
// u32    -> u8[4]
// u32[N] -> u8[P]
// u32    -> u16[2]
// u32[N] -> u16[P]
// u32    -> u64
// u32[2] -> u64
// u32[N] -> u64[P]

def main() {
    // u32 -> bool[32]
    bool[32] v0 = cast(0x0000FFFF);
    assert(v0 == [...[false; 16], ...[true; 16]]);

    // u32[2] -> bool[64]
    bool[64] v1 = cast([0x0000FFFF, 0xFFFFFFFF]);
    assert(v1 == [...[false; 16], ...[true; 16], ...[true; 32]]);

    // u32 -> field
    field v2 = cast(0x12345678);
    assert(v2 == 305419896);

    // u32[2] -> field[2]
    field[2] v3 = cast([0x12345678, 0x87654321]);
    assert(v3 == [305419896, 2271560481]);

    // u32 -> u8[4]
    u8[4] v4 = cast(0x12345678);
    assert(v4 == [0x12, 0x34, 0x56, 0x78]);

    // u32[2] -> u8[8]
    u8[8] v5 = cast([0x12345678, 0x87654321]);
    assert(v5 == [0x12, 0x34, 0x56, 0x78, 0x87, 0x65, 0x43, 0x21]);

    // u32 -> u16[2]
    u16[2] v6 = cast(0x12345678);
    assert(v6 == [0x1234, 0x5678]);

    // u32[2] -> u16[4]
    u16[4] v7 = cast([0x12345678, 0x87654321]);
    assert(v7 == [0x1234, 0x5678, 0x8765, 0x4321]);

    // u32 -> u64
    u64 v8 = cast(0x12345678);
    assert(v8 == 0x0000000012345678);

    // u32[2] -> u64
    u64 v9 = cast([0x12345678, 0x87654321]);
    assert(v9 == 0x1234567887654321);

    // u32[4] -> u64[2]
    u64[2] v10 = cast([0x12345678, 0x00000000, 0x00000000, 0x87654321]);
    assert(v10 == [0x1234567800000000, 0x0000000087654321]);

    return;
}