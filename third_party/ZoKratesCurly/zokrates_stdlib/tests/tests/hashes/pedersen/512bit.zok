//Python code used to create test vector:
// import bitstring
// from zokrates_pycrypto.gadgets.pedersenHasher import PedersenHasher
// import numpy as np
//
// entropy = np.random.bytes(64)
// print(entropy)
// # b'\x17\xd2\xe6\xd9\\t\xe9|K\xf6\x0c\xc0\xc6\xa6\xb4\x17\xba\xfcT\xe9 \\\x80\x80&\x1fBD\x964\xd6\xdf\x8e\x7f^\x06j)n\xcf\x1d\xc1\x83\x8cy\x1c\x8fZ\xee\x9e\xca3!\x00\xf1\x89\xc9k\x02\x88\xc6\xb1P\x1f'
// hasher = PedersenHasher("test")
// digest = hasher.hash_bytes(entropy)
//
// entropy_bits = bitstring.BitArray(bytes=entropy).bin
// digest_bits = bitstring.BitArray(bytes=digest.compress()).bin

import "hashes/pedersen/512bit" as pedersen;

def main() {
    u32[16] e = [0x17d2e6d9, 0x5c74e97c, 0x4bf60cc0, 0xc6a6b417, 0xbafc54e9, 0x205c8080, 0x261f4244, 0x9634d6df, 0x8e7f5e06, 0x6a296ecf, 0x1dc1838c, 0x791c8f5a, 0xee9eca33, 0x2100f189, 0xc96b0288, 0xc6b1501f];

    u32[8] d = pedersen(e);
    assert(d == [0x06dfaca0, 0xd82c07ae, 0x33787b2f, 0x66531802, 0x9f789f16, 0x89218926, 0x29f14d70, 0x2a28280b]);
    
    return;
}