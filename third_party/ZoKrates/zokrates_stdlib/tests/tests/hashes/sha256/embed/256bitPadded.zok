import "hashes/sha256/embed/256bitPadded" as sha256
def main() -> (field):
	bool[256] a = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]
	bool[256] digest = sha256(a)

	assert(digest == [false,true,true,false,false,true,true,false,false,true,true,false,true,false,false,false,false,true,true,true,true,false,true,false,true,false,true,false,true,true,false,true,true,true,true,true,true,false,false,false,false,true,true,false,false,false,true,false,true,false,true,true,true,true,false,true,false,true,true,true,false,true,true,true,false,true,true,false,true,true,false,false,true,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,false,false,false,true,false,true,true,true,false,false,false,true,true,true,false,true,false,false,true,true,true,true,true,true,false,false,false,true,true,true,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,true,false,false,true,false,true,true,true,false,false,false,true,false,true,false,false,true,false,false,false,false,true,false,true,false,true,true,false,true,true,true,false,true,true,true,false,false,false,true,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,true,true,false,false,true,false,false,false,false,false,false,true,false,true,false,true,false,false,true,false,true,true,false,false,true,false,false,false,true,true,true,false,true,false,false,false,false,true,true,false,true,false,true,false,true,true,true,true,true,false,false,true,false,true,false,false,true,false,false,true,false,false,true,false,true])

	return 1