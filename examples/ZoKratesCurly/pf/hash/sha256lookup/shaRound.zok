from "logic_func" import ssig0, ssig1, bsig0, bsig1, ch, maj
from "utils" import Dual, combine_limbs, dual_limbs_to_sparse_limbs, dual_limbs_to_dense_limbs
from "basic_op" import sum
from "const" import K_DD // K_S

def one_extend<N, CM>(w_input: Dual[4][N], LIMBWIDTH: u32[N]) -> Dual[N] {
    let addend: field[4] = [0; 4];
    addend[0] = ssig1::<N>(dual_limbs_to_sparse_limbs(w_input[0]), LIMBWIDTH);
    addend[1] = combine_limbs::<N>(dual_limbs_to_dense_limbs(w_input[1]), LIMBWIDTH);
    addend[2] = ssig0::<N>(dual_limbs_to_sparse_limbs(w_input[2]), LIMBWIDTH);
    addend[3] = combine_limbs::<N>(dual_limbs_to_dense_limbs(w_input[3]), LIMBWIDTH);
    return sum::<4, N, 2, CM>(addend, LIMBWIDTH);
}

def whole_extend<N, CM>(message: Dual[16][N], LIMBWIDTH: u32[N]) -> Dual[64][N] {
    let mut w: Dual[64][N] = [...message, ...[[Dual{s: 0, d: 0}; N]; 48]];
    for i: u32 in 16..64 {
        w[i] = one_extend::<N, CM>([w[i-2], w[i-7], w[i-15], w[i-16]], LIMBWIDTH);
    }
    return w;
}

def one_main<N, CM>(input: Dual[8][N], k: field, w: Dual[N], LIMBWIDTH: u32[N]) -> Dual[8][N] {
    let t1: field[5] = [0; 5];
    t1[0] = combine_limbs::<N>(dual_limbs_to_dense_limbs(input[7]), LIMBWIDTH);
    t1[1] = bsig1::<N>(dual_limbs_to_sparse_limbs(input[4]));
    let input_to_ch: field[3][N] = [dual_limbs_to_sparse_limbs(input[4]), dual_limbs_to_sparse_limbs(input[5]), dual_limbs_to_sparse_limbs(input[6])];
    t1[2] = ch::<N>(input_to_ch);
    t1[3] = k;
    t1[4] = combine_limbs::<N>(dual_limbs_to_dense_limbs(w), LIMBWIDTH);

    let t2: field[2] = [0; 2];
    t2[0] = bsig0::<N>(dual_limbs_to_sparse_limbs(input[0]));
    let input_to_maj: field[3][N] = [dual_limbs_to_sparse_limbs(input[0]), dual_limbs_to_sparse_limbs(input[1]), dual_limbs_to_sparse_limbs(input[2])];
    t2[1] = maj::<N>(input_to_maj);

    let mut output: Dual[8][N] = [[Dual{s: 0, d: 0}; N]; 8];
    for i: u32 in 0..8 {
        let j: u32 = (i + 7) % 8;
        output[i] = input[j];
    }
    output[0] = sum::<7, N, 3, CM>([...t1, ...t2], LIMBWIDTH);
    let d_val: field = combine_limbs::<N>(dual_limbs_to_dense_limbs(input[3]), LIMBWIDTH);
    output[4] = sum::<6, N, 3, CM>([d_val, ...t1], LIMBWIDTH);
    return output;
}

def whole_main<N, CM>(current: Dual[8][N], w: Dual[64][N], LIMBWIDTH: u32[N]) -> Dual[8][N] {
    let mut interm: Dual[8][N] = current;
    for i: u32 in 0..64 {
        interm = one_main::<N, CM>(interm, K_DD[i], w[i], LIMBWIDTH);
    }
    return interm;
}

def compute_final_output<N, CM>(interm: Dual[8][N], current: Dual[8][N], LIMBWIDTH: u32[N]) -> Dual[8][N] {
    let mut output: Dual[8][N] = [[Dual{s: 0, d: 0}; N]; 8];
    for i: u32 in 0..8 {
        let cur_val: field = combine_limbs::<N>(dual_limbs_to_dense_limbs(current[i]), LIMBWIDTH);
        let interm_val: field = combine_limbs::<N>(dual_limbs_to_dense_limbs(interm[i]), LIMBWIDTH);
        output[i] = sum::<2, N, 1, CM>([cur_val, interm_val], LIMBWIDTH);
    }
    return output;
}

def main<N>(input: Dual[16][N], current: Dual[8][N], LIMBWIDTH: u32[3]) -> Dual[8][N] {
    let CM: u32 = 3;
    let w: Dual[64][N] = whole_extend::<N, CM>(input, LIMBWIDTH);
    let interm: Dual[8][N] = whole_main::<N, CM>(current, w, LIMBWIDTH);
    return compute_final_output::<N, CM>(interm, current, LIMBWIDTH);
}