def split_for_shift<N, R>(field[N] input, u32[N] LIMBWIDTH) -> field[2] {
    u32 CUR_WIDTH = 0;
    u32 SPLIT_IDX = 0;
    u32 RED_R = R;
    for u32 i in 0..N {
        SPLIT_IDX = if CUR_WIDTH < R then i else SPLIT_IDX;
        RED_R = if CUR_WIDTH < R then R-CUR_WIDTH else RED_R;
        CUR_WIDTH = CUR_WIDTH + LIMBWIDTH[i];
    }
    u32 TOTAL_WIDTH = CUR_WIDTH;
    u32 LOW_BITS = RED_R * 2;
    u32 HIGH_BITS = 2*LIMBWIDTH[SPLIT_IDX] - 1 - LOW_BITS;
    unsafe witness field[2] split = unsafe_split::<LOW_BITS, HIGH_BITS>(input[SPLIT_IDX]);
    field[2] safe_split = [0, split[1]];
    safe_split[0] =  input[SPLIT_IDX] - split[1] * (2 ** LOW_BITS);
    u32 RED_L = LIMBWIDTH[SPLIT_IDX] - RED_R;
    assert(fits_in_bits_sparse::<RED_L>(safe_split[1]));
    assert(fits_in_bits_sparse::<RED_R>(safe_split[0]));

    CUR_WIDTH = 0;
    field right = 0;
    for u32 i in 0..SPLIT_IDX {
        right = right + input[i] * (2 ** (2 * CUR_WIDTH));
        CUR_WIDTH = CUR_WIDTH + LIMBWIDTH[i];
    }
    right = right + safe_split[0] * (2 ** (2 * CUR_WIDTH));

    CUR_WIDTH = RED_L;
    field left = safe_split[1];
    for u32 i in (SPLIT_IDX+1)..N {
        left = left + input[i] * (2 ** (2 * CUR_WIDTH));
        CUR_WIDTH = CUR_WIDTH + LIMBWIDTH[i];
    }
    return [right, left];
}

def rotr<N, R>(field[N] input, u32[N] LIMBWIDTH_ORI, u32[N] LIMBWIDTH_NEW) -> field {
    field[2] overall_split = split_for_shift::<N, R>(input, LIMBWIDTH_ORI);
    u32 TOTAL_WIDTH = 0;
    for u32 i in 0..N {
        TOTAL_WIDTH = TOTAL_WIDTH + LIMBWIDTH_ORI[i];
    }
    assert(TOTAL_WIDTH == 32);
    field output_val = overall_split[0] * (2 ** (2 * (TOTAL_WIDTH - R))) + overall_split[1];
    return output_val;
}

def shr<N, R>(field[N] input, u32[N] LIMBWIDTH_ORI, u32[N] LIMBWIDTH_NEW) -> field {
    field[2] overall_split = split_for_shift::<N, R>(input, LIMBWIDTH_ORI);
    field output_val = overall_split[1];
    return output_val;
}

def xor_10<N>(field[N] input) -> field {
    assert(N == 2 || N == 3);
    field sum = 0;
    for u32 i in 0..N {
        sum = sum + input[i];
    }
    Dual dual = split_even_dual_10(sum);
    return dual.d;
}

def xor_11<N>(field[N] input) -> field {
    assert(N == 2 || N == 3);
    field sum = 0;
    for u32 i in 0..N {
        sum = sum + input[i];
    }
    Dual dual = split_even_dual_11(sum);
    return dual.d;
}

def xor_for_all_limbs<N>(field[3] input, u32[3] LIMBWIDTH) -> field[3] {
    field int = 0;
    for u32 i in 0..3 {
        int = int + input[i];
    }
    return split_even_dual_for_all_limbs(int, LIMBWIDTH);
}

def and_10(field[2] input) -> Dual {
    return split_odd_dual_10(input[0] + input[1]);
}

def and_11(field[2] input) -> Dual {
    return split_odd_dual_11(input[0] + input[1]);
}

def and(field[3] x, field[3] y) -> Dual[3] {
    Dual[3] output = [Dual {d: 0, s: 0} ; 3];
    output[0] = and_11([x[0], y[0]]);
    output[1] = and_11([x[1], y[1]]);
    output[2] = and_10([x[2], y[2]]);
    return output;
}

def and_s2d(field[3] x, field[3] y) -> field[3] {
    Dual[3] output = and(x, y);
    return dual_limbs_to_dense_limbs(output);
}

def not_10(field input) -> field {
    return S_ONES_10 - input;
}

def not_11(field input) -> field {
    return S_ONES_11 - input;
}

def not(field[3] input) -> field[3] {
    field[3] output = [0; 3];
    output[0] = not_11(input[0]);
    output[1] = not_11(input[1]);
    output[2] = not_10(input[2]);
    return output;
}

def sum<N, M, C, CM>(field[N] input, u32[M] LIMBWIDTH) -> Dual[M] {
    assert((1 << C) >= N);
    field sum = 0;
    for u32 i in 0..N {
        sum = sum + input[i];
    }
    u32 MP1 = M + 1;
    u32[MP1] SPLITWIDTH = [...LIMBWIDTH, C];
    unsafe witness field[MP1] split = unsafe_split_dyn::<MP1>(sum, SPLITWIDTH);
    field[MP1] safe_split = [0, ...split[1..MP1]];
    safe_split[0] = sum - combine_limbs::<M>(safe_split[1..MP1], SPLITWIDTH[1..MP1]) * (2 ** (LIMBWIDTH[0]));
    assert(fits_in_bits::<CM>(safe_split[M]));
    field res_sum = combine_limbs::<M>(safe_split[0..MP1], LIMBWIDTH);
    return dense_limb_to_dual_limb::<M>(safe_split[0..M], LIMBWIDTH);
}